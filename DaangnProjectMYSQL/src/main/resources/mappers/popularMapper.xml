<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "//mybatis.org/DTD Mapper 3.0//EN" "./mybatis-3-mapper.dtd" >
<mapper namespace="kr.ezen.daangn.dao.PopularDAO">
	<!-- 1. 조회 댓글 좋아요를 한지 저장 -->
	<insert id="insertPopular" parameterType="PopularVO">
		INSERT INTO tb_popular (boardRef, userRef, interaction, interaction_time) 
		VALUES (#{boardRef}, #{userRef}, #{interaction}, CURRENT_TIMESTAMP)
	</insert>
	
	<select id="findPopularBoard" resultType="int">
        SELECT 
            boardRef AS board,
            SUM(CASE WHEN interaction = 1 THEN 1 ELSE 0 END) AS 조회,
            SUM(CASE WHEN interaction = 2 THEN 1 ELSE 0 END) AS 댓글,
            SUM(CASE WHEN interaction = 3 THEN 1 ELSE 0 END) AS 좋아요,
            SUM(CASE WHEN interaction = 4 THEN 1 ELSE 0 END) AS 좋아요취소,
            SUM(CASE WHEN interaction = 1 THEN 1 ELSE 0 END) * 1 +
            SUM(CASE WHEN interaction = 2 THEN 1 ELSE 0 END) * 3 +
            SUM(CASE WHEN interaction = 3 THEN 1 ELSE 0 END) * 6 +
            SUM(CASE WHEN interaction = 4 THEN 1 ELSE 0 END) * (-6) AS totalScore
        FROM 
            tb_popular
        WHERE
            interaction_time >= NOW() - INTERVAL 0.5 DAY
        GROUP BY 
            boardRef
        ORDER BY 
            totalScore DESC
	    LIMIT 20
	</select>
	
	<select id="getUserTrendAnalysis" parameterType="hashmap" resultType="PopularVO">
		select
			*
		from
			tb_popular
		<where>
			<if test="userRef != null">
				userRef = #{userRef}
			</if>
		</where>
		order by
			idx desc
		LIMIT #{startNo}, #{sizeOfPage}
	</select>
	<select id="totalCountPopular" parameterType="hashmap" resultType="int">
		select
			count(*)
		from
			tb_popular
		<where>
			<if test="userRef != null">
				userRef = #{userRef}
			</if>
		</where> 
	</select>
	
	<!-- 유저의 최근 방문목록을 구하기 위한 쿼리 (버튼 페이징으로 하자... ) -->
	<select id="getRecentVisitsBoardByUserIdx" parameterType="hashmap" resultType="DaangnMainBoardVO">
		SELECT
		    db.*
			, dc.categoryName AS categoryName
			, ds.statusName AS statusName
			, COALESCE(dlt.countLike, 0) AS countLike
			, COALESCE(cr.chatRoomCount, 0) AS chatRoomCount
		FROM
		    daangn_board db
		JOIN
		    (
		        SELECT
		            MAX(tp.idx) AS idx,
		            tp.boardRef
		        FROM
		            TB_POPULAR tp
		        WHERE
		            tp.USERREF = 1 AND tp.INTERACTION = 1
		        GROUP BY
		            tp.boardRef, tp.userRef
		    ) tp ON tp.boardRef = db.idx
		LEFT JOIN
			daangn_category dc ON dc.categoryIdx = db.categoryRef
		LEFT JOIN
			daangn_status ds ON ds.statusIdx = db.statusRef
		LEFT JOIN
		    (
		        SELECT 
		            boardIdx,
		            COUNT(*) AS countLike
		        FROM 
		            daangn_like_tb
		        GROUP BY 
		            boardIdx
		    ) dlt ON dlt.boardIdx = db.idx
		LEFT JOIN
		    (
		        SELECT 
		            boardIdx,
		            COUNT(*) AS chatRoomCount
		        FROM 
		            chatRoom
		        GROUP BY 
		            boardIdx
		    ) cr ON cr.boardIdx = db.idx
		WHERE
			<![CDATA[
				db.userRef <> #{userRef}
			]]>
		ORDER BY
		    tp.idx desc
		LIMIT #{startNo}, #{sizeOfPage}
	</select>
	
	<!-- 유저 최근방목 목록의 전체 크기를 얻는 쿼리 -->
	<select id="getRecentVisitsBoardTotalCountByUserIdx" parameterType="int" resultType="int">
		SELECT
		    COUNT(*) AS result_count
		FROM
		    daangn_board db
		JOIN
		    (
		        SELECT
		            MAX(tp.idx) AS idx,
		            tp.boardRef
		        FROM
		            TB_POPULAR tp
		        WHERE
		            tp.USERREF = #{userRef} AND tp.INTERACTION = 1
		        GROUP BY
		            tp.boardRef, tp.userRef
		    ) popular ON popular.boardRef = db.idx
		WHERE
		    <![CDATA[
				db.userRef <> #{userRef}
			]]>
	</select>
</mapper>